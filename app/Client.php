<?php

namespace App;

use App\Observers\ClientObserver;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Notifications\Notifiable;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Storage;
use Tymon\JWTAuth\Contracts\JWTSubject;
use Illuminate\Foundation\Auth\User as Authenticatable;
use SammyK\LaravelFacebookSdk\SyncableGraphNodeTrait;

class Client extends Authenticatable implements JWTSubject
{
    use Notifiable;

    use SyncableGraphNodeTrait;

    /**
     * The keys of the array are the names of the fields on the Graph node.
     * The values of the array are the names of the columns in the local database.
     */
    protected static $graph_node_field_aliases = [
        'id' => 'facebook_id',
        'name' => 'full_name',
    ];

    protected $table = 'clients';
    public $timestamps = true;

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
        Client::observe(ClientObserver::class);
    }
    // public function getImageAttribute($value)
    // {
    //     if (!empty($value)){
    //         return url($value);
    //     }else{
    //         return 'http://graph.facebook.com/'.$this->facebook_id.'/picture?type=large&height=500&width=500';
    //     }
    // }
    protected $fillable = array('first_name', 'last_name', 'full_name' ,'email','image', 'phone', 'gender', 'activated', 'password', 
    'api_token', 'verification_code', 'district_id', 'provider', 'provider_id', 'late', 'lang','client_id');
//    protected $visible = array('image');

    public function district()
    {
        return $this->belongsTo('App\District');
    }

    public function stores()
    {
        return $this->belongsTo('App\Store','id','client_id');
    }

    public function car()
    {
        return $this->belongsTo('App\Car','id','client_id');
    }

    public function cruises()
    {
        return $this->hasMany('App\Cruise');
    }

    public function products()
    {
        return $this->belongsToMany('App\Product');
    }

    public function favourites()
    {
        return $this->belongsToMany('App\Product','client_product', 'client_id','product_id');
    }

    public function offers()
    {
        return $this->belongsToMany('App\Offer');
    }
    public function reviews()
    {
        return $this->belongsToMany('App\Product','product_reviews');
    }

    public function carts()
    {
        return $this->belongsToMany('App\Cart','carts','client_id','id');
    }

    public function addresses()
    {
        return $this->hasMany('App\Address');
    }

    public function notifications()
    {
        return $this->morphMany('App\Notification', 'notifiable');
    }

    public function tokens()
    {
        return $this->morphMany('App\Token', 'tokntable');
    }

    public function bankAccount()
    {
        return $this->hasMany('App\BankAccount');
    }

    /**
     * Get the identifier that will be stored in the subject claim of the JWT.
     *
     * @return mixed
     */
    public function getJWTIdentifier()
    {
        return $this->getKey();
    }

    /**
     * Return a key value array, containing any custom claims to be added to the JWT.
     *
     * @return array
     */
    public function getJWTCustomClaims()
    {
        return [];
    }

    public function Active()
    {
        return $this->where('activated', 1)->get();
    }
}
